#!/usr/bin/env node

/**
 * This script generates a TypeScript file with embedded assets as string literals.
 * This ensures the assets are properly bundled into the Bun executable.
 */

const fs = require('fs');
const path = require('path');

// Function to escape content for TypeScript string literal
function escapeForTypeScript(content) {
  return content
    .replace(/\\/g, '\\\\')
    .replace(/`/g, '\\`')
    .replace(/\${/g, '\\${');
}

// Function to read file and return as escaped string
function readAndEscape(filePath) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return escapeForTypeScript(content);
  } catch (error) {
    console.warn(`Warning: Could not read ${filePath}:`, error.message);
    return '';
  }
}

// Define the assets to embed
const publicDir = path.join(__dirname, '..', 'src', 'public');
const assets = [
  'index.html',
  'styles.css',
  'app.js',
  'components/CommentModal.js',
  'services/ApiService.js',
  'services/KeyboardService.js',
  'services/StateManager.js',
  'utils/constants.js',
  'utils/domHelpers.js',
];

// Generate the TypeScript content
let tsContent = `/**
 * Generated file: embedded static assets
 * DO NOT EDIT - This file is auto-generated by scripts/generate-assets.js
 */

export const MIME_TYPES: Record<string, string> = {
  '.html': 'text/html',
  '.css': 'text/css',
  '.js': 'text/javascript',
  '.json': 'application/json',
};

// Embedded assets as string literals
export const EMBEDDED_ASSETS: Record<string, string> = {\n`;

// Add each asset
assets.forEach(assetPath => {
  const fullPath = path.join(publicDir, assetPath);
  const content = readAndEscape(fullPath);
  tsContent += `  '${assetPath}': \`${content}\`,\n`;
});

tsContent += `};

export function getAsset(path: string): { content: string; mimeType: string } | null {
  // Remove leading slash and normalize path
  const normalizedPath = path.startsWith('/') ? path.slice(1) : path;

  // Handle root path
  let targetPath = normalizedPath;
  if (normalizedPath === '' || normalizedPath === 'index.html') {
    targetPath = 'index.html';
  }

  // Check if asset exists
  const content = EMBEDDED_ASSETS[targetPath];
  if (!content) {
    return null;
  }

  const ext = targetPath.includes('.') ?
    '.' + targetPath.split('.').pop() : '.js';

  return {
    content,
    mimeType: MIME_TYPES[ext] || 'text/plain',
  };
}
`;

// Write the generated TypeScript file
const outputPath = path.join(__dirname, '..', 'src', 'assets.ts');
fs.writeFileSync(outputPath, tsContent);

console.log(`Generated embedded assets: ${outputPath}`);
console.log(`Embedded ${assets.length} assets:`, assets);